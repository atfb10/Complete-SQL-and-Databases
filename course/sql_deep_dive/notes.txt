Adam Forestier
May 22, 2023

"" - tables, columns
'' - text

SQL is case insenstive if you use ""

SQL Commands

DCL (Data Control Language)
    * Grant 
    * Revoke

DQL (Data Query Language)
    * SELECT

DDL (Data Defination Language)
    * CREATE
    * ALTER
    * DROP 
    * RENAME
    * TRUNCATE
    * COMMENT

DML (Data Modification Language)
    * INSERT
    * UPDATE
    * DELETE
    * MERGE
    * CALL 
    * EXPLAIN PLAN
    * LOCK TABLE

SQL Function - Set of steps that returns a single value
    * Aggregate - Aggregate all data and return single value.
        > AVG()
        > COUNT()
        > MIN()
        > MAX()
        > SUM()
    * Scalar - Run against each row and return output for each row. EXAMPLE. count

Comparison Operators
    * >
    * >=
    * <
    * <=
    * =
    * !=

Operator Precedence (in order)
    1. Parentheses
    2. Arithmetic Operators
    3. Concatenation Operators
    4. Comparison Conditions
    5. IS NULL, LIKE, NOT IN, IN, etc.
    6. NOT 
    7. AND
    8. OR

    * If the operators have equal precedence, then the operators ar evaluated directionally, from left to right or right to left
        > All are left to right except:
            1. addition & subtraction
            2. NOT 
        > When in doubt, use Parentheses!!!
        > Example of Danger: WHERE gender = 'F' AND state = 'OR' OR state = 'NY';
            # THIS WILL return where gender is female and in new york, or anyone who lives in New York.
        > Example of fixed: WHERE gender = 'F' AND (state = 'OR' OR state = 'NY');
            # This will return females from oregon and new york

Empty Values
    * Shows <NULL> or null for empty values
    * By default, fields are nullable
    * Be mindful about what is made nullable
    * NO MATTER WHAT YOU DO WITH NULL, IT WILL ALWAYS BE NULL (subtract, add, concatenation, etc)
    * IS - allows you to filter on values that are null, not null, TRUE or FALSE
    * IMPORTANT: != does not work on null values
    * "coalesce" replaces null values
        > EXAMPLE: SELECT coalesce(<column> 'Empty') as <column_alias> FROM <table>
    * Coalesce returns the first non-null value in a list

Three-Valued Logic
    * Each expression can have 3 values
    * True, False or NULL
    * Null does NOT equal Null (Null is unknown!)
    * Use IS NULL to check if something is null. = Null WILL NOT WORK!!!

IN - Check if value is in list of value

LIKE - Case sensistive pattern matching
    * Used for pattern matching
    * % Any number of characters
    * - 1 chacter
    * EXAMPLES
        > LIKE '%2' Fields that end with 2
        > LIKE '%2%' Fields that have 2 anywhere in the value
        > LIKE '_00%' Fields that have 2 zeros as second and third character and anything after
        > LIKE '%200%' Fields that have 200 anywhere in the value
        > LIKE '2_%_%' Finds any values that start with 2 and are at least 3 characters in length
        > LIKE '2___3' Finds any values in a 5-digit number that start with 2 and end with 3
    * POSTGRES LIKE only does text comparison; so we must cast whatever value we wish to use LIKE with, to text
        > 2 ways to cast
            1. CAST(salary AS text)
            2. salary::text

ILIKE - Case insentive pattern matching
    * Otherwise, same as LIKE 

UTC
    * Universal way to measure time - Standard, not a time zone
    * ALWAYS use UTC
        > It is the standard
        > It can always be calculated for each individual 
        > ALTER USER postgres SET timezone='UTC';
    * POSTGRES by defualt assumes UTC is the time
    * Shares the same time as GMT (Greenwich Mean Time)

DateTime
    * POSTGRESQL uses ISO-8601 for date formatting. ALWAYS use this standard for storing dates in data base
        > YYYY-MM-DDTHH:MM:SS
        > 2017-08-17T12:47:16+02:00 (+02:00 depicts difference from UTC)
    * Get current date
        > SELECT NOW()::date;
        > SELECT CURRENT_DATE;
    * Format date:
        > SELECT TO_CHAR(CURRENT_DATE, 'dd/mm/yyyy');
    * Subtracting dates returns the difference in days
    * Cast to date: 
        > SELECT date '1800/01/01'
        > Also will format it as ISO-8601 date format
    * Calculate Age:
        > SELECT AGE(date, '1800/01/01'); -> Age from today to date argument
        > SELECT(date '1800/01/01', date '1995/11/11') -> Age between arguments
    * Get specific part of date
        > SELECT EXTRACT (DAY FROM date '1992/11/13') AS "DAY" -> 13
        > SELECT EXTRACT (MONTH FROM date '1992/11/13') AS "MONTH" -> 11
    * Truncate day, month or year
        > SELECT DATE_TRUNC('year', date '1992/11/13') -> 1992-01-01
    * Interval
        > Identifiers - Years, Months, Days, Hours, Minutes
        > SELECT *
          FROM orders
          WHERE purchaseDate <= now() - interval '30 days';

Timestamp - date w/ time & timezone information
    * Can create Timestamp column that does or does not store time zone 

DISTINCT - Remove duplicates
    > Keeps 1 row for each 
    
ORDER - ORDER BY 
    * ORDER BY <column> ASC;
    * ORDER BY <column> DESC;
    * By default, it is ASC.
    * Must specify for each column if wanting to sort by descending for multiple columns (ORDER BY column 1 DESC, column2 DESC;)
    * Can order by function calls as well
        > ORDER BY LENGTH(name)

MISC Notes
    * Dates must go in single quotes ''
Adam Forestier
May 29, 2023

EXPLAIN ANALYZE - can put before any query and it shows information about the query such as execution time

Group By
    * Summarize or aggregate data by groups
    * Group By splits data into groups so we can apply functions against the group rather than the entire table
    * Split by groups, apply aggregate functions, combines group with single value returned from aggregate function
    * Order of Operations: SELECT -> FROM -> WHERE -> GROUP BY -> HAVING -> ORDER
    * FEYMAN: Group By - groups data by a column, or columns. Then a function is run on another column or columns. The result of the function is matched with the column designated as the group

HAVING
    * Filter by groups
    * Having applies filters to a group as a whole -> Can filter on the output of the aggregate 
    * Can have HAVING and WHERE in same query. HAVING filters on group, WHERE filters on row
    * FEYMAN: Having = allows one to filter by the results of a group by

UNION
    * Combining multiple SELECT statements
    * UNION ALL - statement that does the same thing as UNION, except - it does NOT remove duplicate records
    * Example:
        SELECT NULL AS "prod_id", sum(ol.quantity)
        FROM orderlines as ol

        UNION

        SELECT prod_id as "prod_id", sum(ol.quantity)
        FROM orderlines as ol
        GROUP by prod_id
        order by prod_id DESC;

GROUPING SETS
    * KEY: Subclause of GROUP BY that allows you to define multiple groupings in a single query
    * Does exact same thing as UNION, but less syntax
    * Example:
        SELECT prod_id AS "prod_id", orderlineid as "orderlineid", sum(quantity) as "Quantity Sold"
        FROM orderlines
        GROUP BY
            GROUPING SETS (
                (),
                (prod_id),
                (orderlineid)
            )
        ORDER BY prod_id DESC, orderlineid DESC;
    * () is total! 
    * FEYMAN: GROUPING SETS allow you to create multiple sets of groups in a single query! 

ROLLUP
    * Makes all combinations of EXTRACT of a group!
    * EXAMPLE:
        SELECT EXTRACT(YEAR FROM orderdate) AS "YEAR",
            EXTRACT(MONTH FROM orderdate) as "Month",
            EXTRACT(DAY from orderdate) AS "DAY",
            sum(quantity) AS "Quantity Ordered"
        FROM orderlines
        GROUP BY
            ROLLUP (
                EXTRACT(YEAR FROM orderdate),
                EXTRACT(MONTH FROM orderdate),
                EXTRACT(DAY FROM orderdate)
            )
        ORDER BY 
                EXTRACT(YEAR FROM orderdate),
                EXTRACT(MONTH FROM orderdate),
                EXTRACT(DAY FROM orderdate);

Window Functions
    * How one can apply functions against a set of rows related to the current row
    * DEFINITION: Create a new column based on functions performed on a subset of the data
    * Syntax: window_function(arg1, arg2, ...) OVER (
        [PARTITION BY partition_expression]
        [ORDER BY sort_expression [ASC | DESC] [NULLS {FIRST | LAST}]]
    )
    * They are slow - they run over and over against against the set of data
    * Windows apply against filters, but NOT against limits

    * PARTITION BY
        > Divide rows into groups to apply the function against 
        > It is optional
        > EXAMPLE: show each employee vs the average salary for their department
          SELECT *,
                 AVG(s.salary) OVER (
                    PARTITION BY d.dept_name
                 ) AS "Average Salary by Department"
          FROM salaries as s
          JOIN dept_emp AS de USING(emp_no)
          JOIN departments AS d USING(dept_no)

    * FRAMING
        > When using a FRAME clause in a window function we can create a sub-range
        > ROWS or RANGE - whether you want to use a range or rows as a frame
        > UNBOUNDED PRECEDING - Rows before the current one
        > UNBOUNDED FOLLOWING - Rows after the current one
        > UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING - Returns all before and after
        > CURRENT ROW - your current row
        > With ORDER BY 
            # By defaut the framing is usually everything before the current row and the current row
        > Without ORDER BY 
            # All rows

    * Functions
        > SUM/MIN/MAX/AVG - gets value for all records in the partition
            # Example:
                SELECT
                customerid,
                netamount,
                orderdate,
                SUM(netamount) OVER (
                    PARTITION by customerid
                    order by orderid
                    RANGE BETWEEN unbounded preceding and unbounded following
                ) AS "Cumulative Order Amount by Customer"
            FROM orders
            ORDER BY customerid;
        > FIRST_VALUE - returns the first value in the partition
            # Example: I want to know how my price compares to teh item with the lowest price in the same category
                SELECT prod_id, 
                    price, 
                    category,
                    first_value(price) OVER (
                        PARTITION BY category
                        ORDER BY price
                        RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
                    ) AS "Cheapest Product in Category"
                FROM products
                ORDER BY category; 
            # Easier Solution
                SELECT prod_id, 
                    price, 
                    category,
                    MIN(price) OVER (
                        PARTITION BY category
                    ) AS "Cheapest Product in Category"
                FROM products
                ORDER BY category; 
        > LAST_VALUE - returns the last value in the partition
            # Example: I want to know how my price compares to the item with the highest price in the same category
                SELECT 
                    prod_id,
                    title,
                    category,
                    price,
                    last_value(price) OVER ( 
                        PARTITION BY category
                        ORDER BY price
                        RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
                    ) AS "Most expensive Price of product in category"
                FROM products
                ORDER BY category;
        > NTH_VALUE - Returns the "nth row" value in an ordered partition
        > PERCENT_RANK - Returns the relative rank of the current row (rank - 1) / (total rows - 1)
        > RANK - Rank the current row within its partition with gaps 
        > ROW_NUMBER - number the current row within its partition starting from 1 REGARDLESS OF FRAMING
            > EXAMPLE: Show ranking of price per category
                SELECT
                    category,
                    title,
                    price,
                    row_number() OVER(
                        PARTITION BY category
                        order by price DESC
                        range between UNBOUNDED PRECEDING AND UNBOUNDED following 
                    ) as "Price Ranking in Cateogry"
                FROM products
                order by category;
        > LAG/LEAD - Access values from teh previous or next row
    
    * FEYMAN: Window Functions allow one to apply functions by row value

Conditionals
    * Example:
        SELECT a,
            CASE WHEN a=1 THEN 'one'
                 WHEN a=2 THEN 'two'
                 ELSE 'other'
            END
        FROM test;

NULL IF 
    * If value 1 = value 2, return NULL
    * IF sides do not match, return left side
    * NULLIF ('abc', 'def') -> abc

VIEWS
    * Allow you store and query previously run queries 
    * Views are the ouptut of the query we ran 
    * Views Act like tables, you can query them
    * 2 types
        1. Materialized - stores the data physically and periodically updates it when tables change
        2. Non-Materialized - query gets re-run each time the view is called on
            > Take very little space to store. We store the definition of a view, not all of the data that it returns
    * Syntax 
        > CREATE VIEW view_name AS query;
        > CREATE OR REPLACE VIEW view_name AS query;
        > ALTER VIEW view_name RENAME TO view_name;
        > DROP VIEW IF EXISTS view_name;

    * Example: Get most recent salary of employee
        -- view
        CREATE OR REPLACE VIEW last_salary_change AS
        SELECT e.emp_no,
            MAX(s.from_date)
        FROM salaries AS s
        INNER JOIN employees as e ON e.emp_no = s.emp_no
        INNER JOIN dept_emp as de ON de.emp_no = s.emp_no
        INNER JOIN departments as d ON d.dept_no = de.dept_no
        GROUP BY e.emp_no
        ORDER BY e.emp_no;

        -- query 
        SELECT  * 
        FROM salaries as s
        JOIN last_salary_change as lsc USING(emp_no)
        WHERE from_date = lsc.max
        ORDER BY s.emp_no;

    * FEYMAN: Views allow one to save a new table from a query, and allow one to make queries against it

Indexing
    * Index - construct to improve querying performance
            - pointer to data in a table
            - can think of it like a table of contents to find where a piece of data is
        > It does slow down data insertion and updates

    * Types:
        > single-column
            # Most frequently used column in queries
            # Retrieving data that satisfies one condition
            # EXAMPLE
                CREATE INDEX idx_name
                ON city("name");
        > multi-column
            # Most frequently uses columns in queries
            # Retrieving data that satisfies multiple conditions
        > unique
            # ALWAYS use when column contains only unique values
        > partial
            # Over subset of a table
            CREATE INDEX partial_idx_code
            ON city(countrycode) WHERE countrycode IN('TUN','BE','NL');
        > implicit
            # indexes done by default (primary key, unique key - foreign key)

    * Syntax
        > CREATE <index type> INDEX name
          ON <table> (column1, column2, ...)
        > DROP INDEX name

    * When to use:
        1. FOREIGN KEYS
        2. PRIMARY KEYS AND UNIQUE COLUMNS 
        3. Columns that end up in the ORDER BY/WHERE clause often

    * When not to use:
        1. Don't do it, just to do it
        2. Small tables
        3. Tables that are updated frequently
        4. Columns that contain null values 
        5. Columns that have large values

    * Index Algorithms - Each index type uses a different algorithm
        > Syntax
            CREATE <index type> INDEX name
            ON <table> USING <method> (column1, column2, ...)
        > B-TREE
            # default
            # Best used for comparisons with < <= = > >= BETWEEN IN IS NULL IS NOT NULL
        > HASH
            # Can only handle equality operations =
            # SUPER FAST w/ equality
        > GIN (Generalized Inverted Index)
            # Best used when multiple values are stored in a single field - Arrays
        > GIST (Generalized Search Tree)
            # Useful for indexing geometric data
            # Useful for full text search